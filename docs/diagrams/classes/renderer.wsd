@startuml Renderer

class GeneratorService {
    +options: GeneratorOptions
    -plantUmlService: PlantUmlService
    -convertFactories: ConvertContextFactory[]
    +generate(filesPattern: string): void
    -convert(filesPattern: string): ConvertedItem[] | undefined
    -render(items: ConvertedItem[], outDir: string): void
    -save(item: Action, content: string, outDir: string): void
    +renderToImageFile(outDir: string, diagram: string, fileName: string, ext: string): void
    -createWriteStream(outDir: string, fileName: string, extension: string): WriteStream
    -writeWsdToFile(name: string, diagram: string, outDir: string): void
    -createDiagram(name: string, diagramContent: string): string
    -saveActions(actions: Action[], outDir: string, fileName: string): void
    -saveReferences(actionsReferences: ActionReference[], outDir: string, fileName: string): void
}

interface ItemRenderer {
    +render(item: ConvertedItem): string
}


class Renderer {
    +onItemRendered: Observable<{ item: ConvertedItem; output: string; }>
    +render(items: ConvertedItem[]): string | undefined
    +renderItem(item: ConvertedItem): string | undefined
    +renderRecursive(item: ConvertedItem): string[] | undefined
}
interface RendererFactory {
    +create(): Renderer
}

RendererFactory *-- "*" ItemRenderer

@enduml