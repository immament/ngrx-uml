@startuml Generator 

class Converter {
    +convert(context: ConvertContext, program: Program): ConvertedItem[] | undefined
    +convertNode(context: ConvertContext, node: Node, withDefault?: boolean): ConvertedItem | undefined
    +convertRecursive(context: ConvertContext, node: Node): void
}


interface ConvertContextFactory {
    +create(program: Program, typeChecker: TypeChecker, converter: Converter, lastContext?: ConvertContext | undefined): ConvertContext
    +configureConverter(converter: Converter): void
}

interface ConvertContext {
    +getRawResult(): unknown
    +converter: Converter
    +typeChecker: TypeChecker
    +getResult(): ConvertedItem[] | undefined
}



class GeneratorService {
    +options: GeneratorOptions
    -plantUmlService: PlantUmlService
    -convertFactories: ConvertContextFactory[]
    +generate(filesPattern: string): void
    -convert(filesPattern: string): ConvertedItem[] | undefined
    -render(items: ConvertedItem[], outDir: string): void
    -save(item: Action, content: string, outDir: string): void
    +renderToImageFile(outDir: string, diagram: string, fileName: string, ext: string): void
    -createWriteStream(outDir: string, fileName: string, extension: string): WriteStream
    -writeWsdToFile(name: string, diagram: string, outDir: string): void
    -createDiagram(name: string, diagramContent: string): string
    -saveActions(actions: Action[], outDir: string, fileName: string): void
    -saveReferences(actionsReferences: ActionReference[], outDir: string, fileName: string): void
}



interface ConvertedItem {
    +kind: TypeKind
    +kindText: string
    +getChildren(): ConvertedItem[]
}

class NodeConverter {

}

Converter --> ConvertContext

ConvertContextFactory .> ConvertContext : create

GeneratorService o-- "1" Converter
GeneratorService o-- "*" ConvertContextFactory
ConvertContextFactory *-- "*" NodeConverter
Converter o-- "*" NodeConverter

@enduml